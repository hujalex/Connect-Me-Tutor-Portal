import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Profile } from "@/types";
import { createUser } from "./user.actions";

const supabase = createClientComponentClient({
  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
  supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
});

/**
 * Adds a new student profile to the database.
 * This involes creating an authenticated user first, then their profile.
 *
 * @param studentData - Partial data for the new studnet profile. Email is required
 * @returns A promise that resolves to the new created Profile object.
 * @throws Will throw an error if email is missing, user already exists, or database insertion fails.
 */
export const addStudent = async (
  studentData: Partial<Profile>
): Promise<Profile> => {
  const supabase = createClientComponentClient();

  try {
    console.log(studentData);

    if (!studentData.email) {
      throw new Error("Email is required to create a student profile");
    }

    const lower_case_email = studentData.email.toLowerCase().trim();

    // Check if a user with this email already exists
    const { data: existingUser, error: userCheckError } = await supabase
      .from("Profiles")
      .select("user_id")
      .eq("email", lower_case_email);

    if (userCheckError && userCheckError.code !== "PGRST116") {
      // PGRST116 means no rows returned, which is what we want
      throw userCheckError;
    }

    if (existingUser && existingUser.length > 0) {
      throw new Error("A user with this email already exists");
    }

    //-----Moved After Duplicate Check to prevent Sending confimration email-----
    const tempPassword = await createPassword();
    const userId = await createUser(lower_case_email, tempPassword);

    // Create the student profile without id and createdAt
    const newStudentProfile = {
      user_id: userId,
      role: "Student",
      first_name: studentData.firstName ? studentData.firstName.trim() : "",
      last_name: studentData.lastName ? studentData.lastName.trim() : "",
      age: studentData.age || "",
      grade: studentData.grade || "",
      gender: studentData.gender || "",
      // date_of_birth: studentData.dateOfBirth || "",
      start_date: studentData.startDate || new Date().toISOString(),
      availability: studentData.availability || [],
      email: lower_case_email,
      parent_name: studentData.parentName || "",
      parent_phone: studentData.parentPhone || "",
      parent_email: studentData.parentEmail || "",
      timezone: studentData.timeZone || "",
      subjects_of_interest: studentData.subjectsOfInterest || [],
      tutor_ids: [], // Changed from tutorIds to tutor_ids
      status: "Active",
      student_number: studentData.studentNumber,
    };

    // Add student profile to the database
    const { data: profileData, error: profileError } = await supabase
      .from("Profiles") // Ensure 'profiles' is correctly cased
      .insert(newStudentProfile)
      .select("*");

    if (profileError) throw profileError;

    // Ensure profileData is defined and cast it to the correct type
    if (!profileData) {
      throw new Error("Profile data not returned after insertion");
    }

    // Type assertion to ensure profileData is of type Profile
    const createdProfile: any = profileData;

    // Return the newly created profile data, including autogenerated fields
    return {
      id: createdProfile.id, // Assuming 'id' is the generated key
      createdAt: createdProfile.createdAt, // Assuming 'created_at' is the generated timestamp
      userId: createdProfile.userId, // Adjust based on your schema
      role: createdProfile.role,
      firstName: createdProfile.firstName,
      lastName: createdProfile.lastName,
      age: createdProfile.age,
      grade: createdProfile.grade,
      gender: createdProfile.gender,
      // dateOfBirth: createdProfile.dateOfBirth,
      startDate: createdProfile.startDate,
      availability: createdProfile.availability,
      email: createdProfile.email,
      parentName: createdProfile.parentName,
      parentPhone: createdProfile.parentPhone,
      parentEmail: createdProfile.parentEmail,
      timeZone: createdProfile.timeZone,
      subjectsOfInterest: createdProfile.subjectsOfInterest,
      tutorIds: createdProfile.tutorIds,
      status: createdProfile.status,
      studentNumber: createdProfile.studentNumber,
    };
  } catch (error) {
    console.error("Error adding student:", error);
    throw error;
  }
};

/**
 * Adds a new tutor profile to the database.
 * This involves creating an authenticated user first, then their profile.
 *
 * @param tutorData - Partial data for the new tutor profile. Email is required.
 * @returns A promise that resolves to the newly created Profile object.
 * @throws Will throw an error if email is missing, user already exists, or database insertion fails.
 */
export const addTutor = async (
  tutorData: Partial<Profile>
): Promise<Profile> => {
  const supabase = createClientComponentClient();
  try {
    console.log(tutorData);
    if (!tutorData.email) {
      throw new Error("Email is required to create a student profile");
    }

    const lowerCaseEmail = tutorData.email.toLowerCase().trim();

    // Check if a user with this email already exists
    const { data: existingUser, error: userCheckError } = await supabase
      .from("Profiles")
      .select("user_id")
      .eq("email", lowerCaseEmail);

    if (userCheckError && userCheckError.code !== "PGRST116") {
      // PGRST116 means no rows returned, which is what we want
      throw userCheckError;
    }

    if (existingUser && existingUser.length > 0) {
      throw new Error("A user with this email already exists");
    }

    //-----Moved After Duplicate Check to prevent Sending confimration email-----
    const tempPassword = await createPassword();
    const userId = await createUser(lowerCaseEmail, tempPassword);

    // Create the student profile without id and createdAt
    const newTutorProfile = {
      user_id: userId,
      role: "Tutor",
      first_name: tutorData.firstName ? tutorData.firstName.trim() : "",
      last_name: tutorData.lastName ? tutorData.lastName.trim() : "",
      date_of_birth: tutorData.dateOfBirth || "",
      start_date: tutorData.startDate || new Date().toISOString(),
      availability: tutorData.availability || [],
      email: lowerCaseEmail,
      timezone: tutorData.timeZone || "",
      subjects_of_interest: tutorData.subjectsOfInterest || [],
      tutor_ids: [], // Changed from tutorIds to tutor_ids
      status: "Active",
      student_number: null,
    };

    // Add tutor profile to the database
    const { data: profileData, error: profileError } = await supabase
      .from("Profiles") // Ensure 'profiles' is correctly cased
      .insert(newTutorProfile)
      .select("*");

    if (profileError) throw profileError;

    // Ensure profileData is defined and cast it to the correct type
    if (!profileData) {
      throw new Error("Profile data not returned after insertion");
    }

    // Type assertion to ensure profileData is of type Profile
    const createdProfile: any = profileData;

    // Return the newly created profile data, including autogenerated fields
    return {
      id: createdProfile.id, // Assuming 'id' is the generated key
      createdAt: createdProfile.createdAt, // Assuming 'created_at' is the generated timestamp
      userId: createdProfile.userId, // Adjust based on your schema
      role: createdProfile.role,
      firstName: createdProfile.firstName,
      lastName: createdProfile.lastName,
      dateOfBirth: createdProfile.dateOfBirth,
      startDate: createdProfile.startDate,
      availability: createdProfile.availability,
      email: createdProfile.email,
      parentName: createdProfile.parentName,
      parentPhone: createdProfile.parentPhone,
      parentEmail: createdProfile.parentEmail,
      timeZone: createdProfile.timeZone,
      subjectsOfInterest: createdProfile.subjectsOfInterest,
      tutorIds: createdProfile.tutorIds,
      status: createdProfile.status,
      studentNumber: createdProfile.student_number,
    };
  } catch (error) {
    console.error("Error adding student:", error);
    throw error;
  }
};

/**
 * Resends an email confirmation link to the specified email address.
 *
 * @param email - The email address to resend the confirmation to.
 * @returns A promise that resolves if the request is successful.
 * @throws Will throw an error if the resend operation fails.
 */
export const resendEmailConfirmation = async (email: string) => {
  try {
    const { error } = await supabase.auth.resend({
      type: "signup",
      email: email,
      options: {
        emailRedirectTo: `${window.location.origin}`,
      },
    });
    if (error) throw error;
  } catch (error) {
    console.error("Failed to resend Email Confirmation", error);
    throw error;
  }
};

/**
 * Generates a random 10-digit password string.
 *
 * @returns A promise that resolves to a string representing the 10-digit password
 */
export async function createPassword(): Promise<string> {
  let password = "";

  for (let i = 0; i < 10; ++i) {
    password += Math.floor(Math.random() * 10);
  }

  return password;
}
